name: Build for all platforms

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}


    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS already has WebKit framework built-in, no additional installation needed
        echo "macOS WebKit framework is already available"
        # Ensure we have the latest Xcode command line tools
        xcode-select --install || true
        # Install protobuf for lance-encoding dependency
        brew install protobuf
        # Install libsoup for soup2-sys dependency
        brew install libsoup
        # JavaScriptCore is built into macOS, no additional installation needed
        echo "JavaScriptCore is built into macOS"
        # Prevent any WebKit installation attempts
        echo "Skipping WebKit installation - using system WebKit"

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install protobuf compiler for lance-encoding dependency
        echo "Installing protobuf compiler for Windows..."
        # Download and install protoc from GitHub releases
        $protocVersion = "25.1"
        $protocUrl = "https://github.com/protocolbuffers/protobuf/releases/download/v$protocVersion/protoc-$protocVersion-win64.zip"
        $protocZip = "protoc.zip"
        $protocDir = "protoc"
        
        # Download protoc
        Invoke-WebRequest -Uri $protocUrl -OutFile $protocZip
        
        # Extract protoc
        Expand-Archive -Path $protocZip -DestinationPath $protocDir -Force
        
        # Add protoc to PATH for this session
        $protocPath = Join-Path $PWD $protocDir
        $protocExe = Join-Path $protocPath "bin\protoc.exe"
        echo "PROTOC=$protocExe" >> $env:GITHUB_ENV
        echo "PATH=$protocPath\bin;$env:PATH" >> $env:GITHUB_ENV
        
        echo "Protoc installed at: $protocExe"

    - name: Install dependencies
      run: npm ci

    - name: Build the application (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Building for target: ${{ matrix.target }}"
        echo "Platform: ${{ matrix.platform }}"
        echo "OS: ${{ matrix.os }}"
        # Use custom build script to prevent WebKit installation issues
        ./build-script.sh ${{ matrix.target }}
      env:
        CARGO_INCREMENTAL: 0
        CARGO_NET_RETRY: 2
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""
        # Disable WebKit installation
        TAURI_BUNDLE_ACTIVE: "false"
        # Prevent any WebKit installation attempts
        WEBKIT_DISABLE_INSTALL: "true"

    - name: Build the application (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Building for target: ${{ matrix.target }}"
        echo "Platform: ${{ matrix.platform }}"
        echo "OS: ${{ matrix.os }}"
        # Windows build with environment variables
        npx tauri build --target ${{ matrix.target }} --verbose
      env:
        CARGO_INCREMENTAL: 0
        CARGO_NET_RETRY: 2
        TAURI_PRIVATE_KEY: ""
        TAURI_KEY_PASSWORD: ""
        # Enable bundle creation for Windows
        TAURI_BUNDLE_ACTIVE: "true"
        # Prevent any WebKit installation attempts
        WEBKIT_DISABLE_INSTALL: "true"

    - name: Upload macOS DMG
      if: matrix.platform == 'macos'
      uses: actions/upload-artifact@v4
      with:
        name: play-macos-${{ github.sha }}
        path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg


    - name: Debug Windows build output
      if: matrix.platform == 'windows'
      run: |
        echo "Checking Windows build output..."
        echo "Current working directory:"
        Get-Location
        echo "Checking if target directory exists:"
        if (Test-Path "src-tauri/target") {
          echo "src-tauri/target exists"
          Get-ChildItem -Path "src-tauri/target" -Force
        } else {
          echo "src-tauri/target does not exist"
        }
        echo "Checking if release directory exists:"
        if (Test-Path "src-tauri/target/${{ matrix.target }}") {
          echo "src-tauri/target/${{ matrix.target }} exists"
          Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}" -Force
        } else {
          echo "src-tauri/target/${{ matrix.target }} does not exist"
        }
        echo "Checking if release directory exists:"
        if (Test-Path "src-tauri/target/${{ matrix.target }}/release") {
          echo "src-tauri/target/${{ matrix.target }}/release exists"
          Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release" -Force
        } else {
          echo "src-tauri/target/${{ matrix.target }}/release does not exist"
        }
        echo "Checking for any .exe files in the entire target directory:"
        Get-ChildItem -Path "src-tauri/target" -Recurse -Include "*.exe" -ErrorAction SilentlyContinue | Select-Object -First 10

    - name: Upload Windows MSI
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: play-windows-${{ github.sha }}
        path: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
      continue-on-error: true

    - name: Upload Windows EXE
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: play-windows-exe-${{ github.sha }}
        path: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
      continue-on-error: true

    - name: Upload Windows All Files
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: play-windows-all-${{ github.sha }}
        path: src-tauri/target/${{ matrix.target }}/release/bundle/
      continue-on-error: true
